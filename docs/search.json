[{"path":"https://ucanr-igis.github.io/uasimg/articles/catalog_wrkflw.html","id":"copy-image-files-from-the-drone-to-a-hard-drive","dir":"Articles","previous_headings":"","what":"1. Copy image files from the drone to a hard drive","title":"Cataloging Workflow","text":"Notes first step getting images drone onto hard drive. Usually involves memory card reader USB cable, file management utility like Windows Explorer. uasimg help step. Internal drives recommended tend faster reliable external drives (either can work). Make sure directory names help remember images . example, might name directories using pattern: date + flight number (e.g., 2020-10-19 Flight 03). Tips: can save time creating directories go field. enough blank SD cards flights, can just leave images SD card temporary backup get back office. Label card put somewhere safe. need use , reformat SD card. Windows Explorer generally works fine , unless memory card >32GB drone camera reads FAT32 (see Best Practices Working Memory Cards details).","code":""},{"path":"https://ucanr-igis.github.io/uasimg/articles/catalog_wrkflw.html","id":"extract-image-info","dir":"Articles","previous_headings":"","what":"2. Extract image info","title":"Cataloging Workflow","text":"Sample code: Notes internet connection required step. can done field want verify image locations, see dropouts, check overlap. Always save results uas_info() variable. uas_info() can process multiple directories . Simply pass character vector directory names (shown ). first time uas_info() runs directory, may take little extract EXIF data images. Subsequent calls go much faster, EXIF data cached. object returned uas_info() contains image locations, flight area (minimum convex polygon around images), basic flight metadata, potentially footprints (fp = TRUE).","code":"vegsrvy_dir <- c(\"c:/uas/hopland-veg-survey/flight01/DCIM\",                  \"c:/uas/hopland-veg-survey/flight02/DCIM\",                  \"c:/uas/hopland-veg-survey/flight03/DCIM\")  vegsrvy_info <- uas_info(vegsrvy_dir)"},{"path":"https://ucanr-igis.github.io/uasimg/articles/catalog_wrkflw.html","id":"create-flight-metadata-files","dir":"Articles","previous_headings":"","what":"3. Create flight metadata files","title":"Cataloging Workflow","text":"Flight metadata refers info isn’t saved images. example name pilot, project code, site name, etc. Creating flight metadata strongly recommended wish generate flight summary reports move images structured directory tree. additional info, see Flight Metadata vignette. recommended way enter save flight metadata create metadata.txt file directory. function gets started, manually continue editing flight info using text editor. Sample code: case, uas_metadata_make(vegsrvy_info) create ‘blank’ metadata text file folder vegsrvy_info (vegsrvy_info created uas_info()). Notes customize flight metadata fields, run uas_setfld() first. pre-populate metadata fields (e.g., name organization), pass path URL existing metadata file md_template argument. Pass open = TRUE open metadata text files editing. use system text editor instead text editor defined R, let use_system_editor = TRUE.","code":"## Create the metadata text files and open them in a text editor uas_metadata_make(vegsrvy_info, make_new = TRUE, overwrite = FALSE, open = TRUE)"},{"path":"https://ucanr-igis.github.io/uasimg/articles/catalog_wrkflw.html","id":"move-oddball-images-into-their-own-folders","dir":"Articles","previous_headings":"","what":"4. Move oddball images into their own folders","title":"Cataloging Workflow","text":"Optional ‘Oddball’ images context images aren’t going stitch photogrammetry software. include photos calibration targets, images aborted flights, test photos, drone selfies, etc. idea separated (deleted) don’t mess stitching process. can move images Windows Explorer. Notes Put images want keep (like calibration photos) subfolders stay originals. future, uasimg may function / GUI help identify move oddball images flight management software includes post-processing step (e.g., eMotion), remember keep flight logs can post-process images (better yet post-processing move catalog images).","code":""},{"path":"https://ucanr-igis.github.io/uasimg/articles/catalog_wrkflw.html","id":"split-andor-merge-images-across-folders","dir":"Articles","previous_headings":"","what":"5. Split and/or merge images across folders","title":"Cataloging Workflow","text":"Optional Notes Sometimes need divide images single folder different folders achieve gold standard one processing job per folder. example, folder may contain images multiple flights. might want split RGB (jpg) files mulitspectral (tif) files separate folders (normally stitch separately). times, many several folders images part flight (cameras limit 999 images per folder). case, merge together. take note, combining files different directories may require changing file names first prevent duplicates. Currently, split /merge folders manually (.e., Windows Explorer). Functions coming uasimg facilitate splitting merging image folders.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/articles/catalog_wrkflw.html","id":"rerun-uas_info-to-refresh-the-metadata","dir":"Articles","previous_headings":"","what":"6. (Re)run uas_info() to refresh the metadata","title":"Cataloging Workflow","text":"’ve created metadata text files, moved oddball images directories, need pull location info Sample code (step 2): Notes uas_info() ‘sucks ’ flight metadata finds metadata text files. every time edit save metadata text files text editor, rerun uas_info(). uas_info() go quickly initial extraction EXIF data images. add move images folder, cache invalidated extract EXIF data . Don’t alarmed. see information saved flight info object, type name object console hit enter.","code":"my_img_dirs <- c(\"c:/uas/hopland-veg-survey/flight01/DCIM\",                  \"c:/uas/hopland-veg-survey/flight02/DCIM\",                  \"c:/uas/hopland-veg-survey/flight03/DCIM\")  vegsrvy_info <- uas_info(my_img_dirs)"},{"path":"https://ucanr-igis.github.io/uasimg/articles/catalog_wrkflw.html","id":"move-images-into-a-structured-directory-tree","dir":"Articles","previous_headings":"","what":"7. Move images into a structured directory tree","title":"Cataloging Workflow","text":"Optional desired, can move images structured directory tree help make easier find. Creating structured directory trees requires ) ’ve entered flight metadata every flight, ii) ’ve passed template specifies directory tree constructed. Sample code: Notes Moving images structured directory tree can done time. thing potentially ‘break’ move images new location links point flight summary reports TOC (happen flight summary reports saved default ‘map’ sub-directory image directory, didn’t ‘gather’ flight summary reports one location created tht TOC.) See help page uas_move() additional arguments details.","code":"uas_move(vegsrvy_info,           tree = \"my_dir_tree_template.txt\",          outdir_base = \"d:/uas_data\",          imgs_action = \"copy\")"},{"path":"https://ucanr-igis.github.io/uasimg/articles/catalog_wrkflw.html","id":"export-flight-geometries-to-gis-files","dir":"Articles","previous_headings":"","what":"8. Export flight geometries to GIS files","title":"Cataloging Workflow","text":"Optional desired, can export geometries individual flights KML /Shapefiles. Sample code: Notes Features can export include image centroids, minimum convex polygon around images (used approximate flight area), estimated footprints. default, KML Shapefiles saved ‘map’ subdirectory image folder. subdirectory doesn’t already exist, created. can specify different output directory output_dir argument. combine features multiple flights single KML / Shapefile, use combine_feats argument. useful, example, import flight planning software see ’ve already flown. See help details. uas_report() uas_toc also arguments export flight geometries link flight summary HTML pages. can import MCP KML planning missions, see ’ve already flown. Flight area (.e., MCP) KML files tested compatibility eMotion, Pix4Dcapture (Android), Drone Deploy (Android), DJI Pilot.","code":"uas_exp_kml(vegsrvy_info, ctr = TRUE, mcp = TRUE)  uas_exp_shp(vegsrvy_info, ctr = TRUE, mcp = TRUE)"},{"path":"https://ucanr-igis.github.io/uasimg/articles/catalog_wrkflw.html","id":"create-flight-summaries","dir":"Articles","previous_headings":"","what":"9. Create flight summaries","title":"Cataloging Workflow","text":"step involves creating standalone HTML pages summarize images single folder. can thought individual ‘pages’ data catalog. Sample code: Notes want image thumbnails pop-windows, set thumbnails = TRUE. advised creating thumbnails can take . uas_report() several arguments can use tweak appearance flight summary. include custom title (report_title), whether add links image centroids MCP KML files (attachments), whether download background image (png_map), HTML files use custom header footer, etc. See help details.","code":"vegsrvy_rpt <- uas_report(vegsrvy_info)"},{"path":"https://ucanr-igis.github.io/uasimg/articles/catalog_wrkflw.html","id":"create-a-table-of-contents-for-all-the-flight-summaries","dir":"Articles","previous_headings":"","what":"10. Create a Table of Contents for all the flight summaries","title":"Cataloging Workflow","text":"several flights general area, final step create master Table Contents (TOC) series flight summaries. TOC standalone HTML file links individual flight summaries. Sample code: Notes Use fltmap_show = TRUE insert little interactive map flight areas top TOC. fltmap_base can used display additional KML files summary map. example overall boundary campaign. gather_dir tells R copy files catalog subdirectoy output_dir. includes individual flight summary pages dependent files - KML files, thumbnails. entire data catalog single folder, can FTP web server, zip share colleagues, etc.","code":"toc_rgb_fn <- uas_toc(vegsrvy_rpt,                        output_dir = \"c:/drone_data/catalogs/pt_pinole\",                       gather_dir = \".\", fltmap_show = TRUE, open_toc = FALSE)"},{"path":"https://ucanr-igis.github.io/uasimg/articles/flight_metadata.html","id":"image-metadata-vs--flight-metadata","dir":"Articles","previous_headings":"","what":"Image Metadata vs. Flight Metadata","title":"Flight Metadata","text":"Image metadata generally refers information individual images. example, location, altitude, type camera, focal length, resolution, etc. Modern cameras great job saving information header JPG / TIF files (also known EXIF data). Photogrammetry programs rely image metadata help stitch images together. Flight metadata refers properties images inherit flight . include things like name site, pilot, drone, weather conditions, images actually saved, etc. bits information essential photogrammetry, extremely useful data management. Flight metadata can also help interpret results photogrammetry. example inconsistent color tones brightness orthomosaic result clouds flight, wouldn’t necessarily know just looking images.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/articles/flight_metadata.html","id":"how-does-uasimg-use-flight-metadata","dir":"Articles","previous_headings":"","what":"How does uasimg use flight metadata?","title":"Flight Metadata","text":"uasimg uses image flight metadata help organize, catalog, share drone images. Image metadata read image files. GPS locations used make interactive maps flight summary pages. Properties resolution time stamps reported flight summary pages. image metadata specifies ) known camera ii) relative ground altitude, uasimg can also compute estimated image footprints generate world files. uasimg uses flight metadata1 primarily cataloging sorting2 images. can create metadata fields things like pilot, aircraft used, weather conditions, etc. ‘standard’ set metadata fields drone flights. can define whichever flight metadata fields ’d like record based specific requirements. example, goal publish data catalog online people can view potentially request data, ’d probably want comprehensive set metadata fields catalog simply internal use. common metadata fields include site, sub-site, project, sub-project. addition documentation, flight metadata fields can used create standard directory trees based user-defined template, move images trees3. large collections drone data, flight metadata can also help manage catalog production workflow. example may want (re)generate thumbnails flights part specific project, specific site. project saved flight metadata, can easily write loops operate flights.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/articles/flight_metadata.html","id":"where-do-i-enter-flight-metadata","dir":"Articles","previous_headings":"","what":"Where do I enter flight metadata?","title":"Flight Metadata","text":"basically two ways enter flight metadata. can enter flight metadata metadata.txt text files saved folder images, programmatically call uas_info(). recommended way enter flight metadata metadata.txt4 files. regular text files editing easy text editor (like Notepad). saving flight metadata file lives images, persist can read . example actual metadata text file. basic format field name, followed colon, followed value (aka YAML). Field names contain spaces. can add comments blank lines make readable.  don’t create metadata.txt files scratch! uas_metadata_make() convenience function can following: create new metadata text files one image folders pre-populate fields choice pre-populate fields defaults values open text file(s) text editor complete editing Typically, edit save metadata.txt files, ’ll want re-run uas_info() new metadata read R. second way record flight metadata passing named list metadata argument uas_info(). code-centric approach might make sense flight metadata saved separate database, enjoy coding.","code":"## FLIGHT METADATA FILE FOR: ## D:/Pix4D/HREC/RiverFire2020/imgs/ebPlus_Flt05_orig/DCIM/EP-01-26841_0085/metadata.txt  name_short: ebPlus_flt05_orig_msp  name_long: eBee Plus Fight 05, raw images  description: These images were collected as part of the River Fire recovery mapping project at HREC (mapping areas burnt in the 2018 River Fire).  proj: riverfire2020  loc: hrec  notes: The eBee Plus did not have RTK/PPK capabilities. Pre-flight camera calibration was done using a calibration target from MicaSense (not Parrot). The flight was conducted using eMotion 3.5 with 75% x 75% overlap (front and side respectively), with a targetted GSD of 11cm (resulting in a flight altitude of ~116m AGL).  pilot: Shane Feirer, IGIS  contact: Andy Lyons, IGIS  data_url: NA  tags: HREC, RiverFire2020"},{"path":"https://ucanr-igis.github.io/uasimg/articles/flight_metadata.html","id":"what-are-the-standard-flight-metadata-fields","dir":"Articles","previous_headings":"","what":"What are the ‘standard’ flight metadata fields?","title":"Flight Metadata","text":"industry standards metadata drone flights. uasimg provide following ‘---box’ defaults:  Default Metadata Fields Drone Flights","code":"uas_flds_oem() #>  [1] \"name_short\"  \"name_long\"   \"description\" \"proj\"        \"loc\"         #>  [6] \"pilot\"       \"contact\"     \"uav\"         \"data_url\"    \"tags\"        #> [11] \"notes\""},{"path":"https://ucanr-igis.github.io/uasimg/articles/flight_metadata.html","id":"how-do-i-change-the-default-flight-metadata-fields","dir":"Articles","previous_headings":"","what":"How do I change the default flight metadata fields?","title":"Flight Metadata","text":"uas_info() always import whatever finds accompanying metadata.txt file. can however customize fields appear ‘blank’ metadata file created uas_metadata_make(): Tip 1: name_short name_long used several uasimg functions export files create flight summaries. Hence recommended always include fields flight metadata. Tip 2: set default metadata fields back factory presets, run uas_setflds() without arguments","code":"## View default flight metadata fields uas_getflds() #>  [1] \"name_short\"  \"name_long\"   \"description\" \"proj\"        \"loc\"         #>  [6] \"pilot\"       \"contact\"     \"uav\"         \"data_url\"    \"tags\"        #> [11] \"notes\"  ## Set default flight metadata fields uas_setflds(c(\"name_short\", \"name_long\", \"proj\", \"subproj\", \"site_name\", \"weather\", \"aircraft\", \"client\")) #>  - Default metadata fields set to: name_short, name_long, proj, subproj, site_name, weather, aircraft, client  ## View default flight metadata fields uas_getflds() #> [1] \"name_short\" \"name_long\"  \"proj\"       \"subproj\"    \"site_name\"  #> [6] \"weather\"    \"aircraft\"   \"client\""},{"path":"https://ucanr-igis.github.io/uasimg/articles/flight_metadata.html","id":"how-do-i-create-metadata-files-with-default-values","dir":"Articles","previous_headings":"","what":"How do I create metadata files with default values?","title":"Flight Metadata","text":"may standard metadata fields values can safely pre-populated (e.g., name organization, name pilot, name aircraft, etc.). can tell uas_metadata_make() use pre-populated values generating new metadata text files md_template argument: ‘master’ metadata template can even online. Just make sure URL returns raw text [example].","code":"## Define a master metadata template, with some fields pre-populated md_template_fn <- \"~/master_flight_metadata.txt\"    uas_metadata_make(barn_info, make_new = TRUE, open = TRUE, md_template = md_template_fn) ## Define a master metadata template, with some fields pre-populated md_template_url <- \"https://gist.githubusercontent.com/ajlyons/d0826f4775413ba27a21c62aff619bc2/raw/a6f3dde133652a729283b0e03f8a923f54f73a67/hrec_riverfire2020_metadata\"    uas_metadata_make(barn_info, make_new = TRUE, open = TRUE, md_template = md_template_url)"},{"path":"https://ucanr-igis.github.io/uasimg/articles/flight_metadata.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Flight Metadata","text":"Flight metadata useful variety data management purposes. Entering metadata rarely enjoyable, uasimg several ways customize metadata fields work facilitate creating metadata text files. Include flight metadata workflow results useful catalogs ability automate common data management tasks.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/articles/uasimg.html","id":"package-goals","dir":"Articles","previous_headings":"","what":"Package Goals","title":"Managing Drone Images with uasimg","text":"Like many R packages, uasimg born solve specific practical problem - manage thousands images drone projects! Creating maps 3D models drones begins collecting still images taken lot overlap. produces lot individual images. feed images photogrammetry structure motion (SfM) software, produces lot data (’s another story, uasimg doesn’t help manage outputs photogrammetry). better worse, photogrammetry / SfM software expects —humble user—images cleaned organized ahead time. single project, can move images around manually Windows Explorer. quickly becomes unmanageable lots projects, /lot people involved different parts workflow. uasimg functions semi-automate data management make consistent. second need uasimg addresses documenting sharing collections drone data. helpful managing projects, importantly long-term data archiving reproducibility. Drone images raw data upon everything else follows. Someone can always repeat stitching process, images can replaced recreated. system locating images, viewing properties, therefore needed sound scientific practice. next step - sharing existence images colleagues search engines, likewise part parcel part scientific community. Lastly, uasimg several utility functions help analyze individual drone images. include creating world files (can view photos GIS software) cropping area overlap (make non-photogrammetric photo mosaic). uasimg : plan drone flights photogrammetry structure motion processing manage intermediate final ouputs photogrammetry software","code":""},{"path":"https://ucanr-igis.github.io/uasimg/articles/uasimg.html","id":"universal-step-1--extract-image-info","dir":"Articles","previous_headings":"","what":"Universal Step 1. Extract Image Info","title":"Managing Drone Images with uasimg","text":"Regardless want uasimg, first step extracting location info directory images. includes GPS coordinates image, well image dimensions, camera name, focal length, drone altitude, bearing, forth. extract metadata folder(s) images uas_info(): Notes: shown , object returned uas_info() saved variable can use input functions. drone camera isn’t recognized, ’ll get error message. Don’t panic. Contact package maintainer get camera added, see help page instructions pass parameters camera. can pass vector folders uas_info() extract image info . folders represent individual flights, images single flight spread across multiple directories. uas_info() requires companion command line utility called EXIFtool, needs installed. See README details. Setting cache = TRUE recommended. save image locations command run folder won’t run EXIFtool . modern drones record altitude launch point, however older cameras like GoPro multispectral cameras like Sequoia don’t record relative altitude. case, option pass relative altitude alt_agl argument, simply leaving . Omitting relative altitude big deal. thing prevents estimating GSD image footprints.","code":"library(uasimg) flt1_info <- uas_info(\"D:/Pix4D/PtPinole/imgs/wg/wg_flt01\", cache = TRUE)"},{"path":"https://ucanr-igis.github.io/uasimg/articles/uasimg.html","id":"details-accuracy-of-the-estimated-gsd-and-image-footprints","dir":"Articles","previous_headings":"Universal Step 1. Extract Image Info","what":"Details: Accuracy of the Estimated GSD and Image Footprints","title":"Managing Drone Images with uasimg","text":"uasimg estimates image footprints GSD (ground sampling distance, aka pixel size) based camera type recorded height ground level. Many drones record altitude launch point, study area flat estimates reasonable (although accuracy recorded altitude accurate xy location). drone record relative altitude (.e., multispectral cameras), can pass AGL altitude argument uas_info(). hilly areas, altitude camera locations variable, image footprints GSD always -estimated. distance drone ground larger altitude launch point (e.g., flying valley), GSD footprint -estimated (.e., small). Conversely distance ground smaller launch altitude (e.g., flying hill), estimated GSD footprint -estimated.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/articles/uasimg.html","id":"flight-metadata","dir":"Articles","previous_headings":"Universal Step 1. Extract Image Info","what":"Flight Metadata","title":"Managing Drone Images with uasimg","text":"lot information can extracted image files, including date, time, GPS location, camera type, focal length, etc. However metadata fields pertaining flight manually provided. include things like name pilot, short description mission goals, download link, contact info, etc. referred flight metadata. Entering flight metadata completely optional, many useful functions uasimg, creating useful data catalogs organizing images structured directory trees, require flight metadata. two ways can enter flight metadata - function arguments text files. recommended way create little text file image folder. file automatically read assuming file name starts ‘metadata’ ends ‘txt’ extension (e.g., metadata.txt, metadata-flt01.txt). file formatted YAML, looks like: seen example , line text file start field name (without spaces), followed colon, followed value (formatting style also known YAML). Blank lines lines start # ignored. metadata field can added file long follows rules. built-Flight Summary page recognizes following metadata fields: can manually create metadata.txt files using Notepad text editor. Just sure save folder images. Alternately uas_metadata_make() can used create ‘blank’ metadata.txt files several directories : Additional notes uas_metadata_make(): fields uas_metadata_make() inserts blank metadata text files can passed , defaults set uas_setflds(). Fields can also pre-populated using . See help page details. Include open = TRUE open edit metadata files text editor. edit metadata.txt* file, need (re)run uas_info() order use latest values functions. Unlike EXIF data image files, supplemental metadata always read fresh never cached. second way save supplemental metadata passing named list metadata argument running uas_info(). fields supported uses . example:","code":"name_long: Point Pinole, West Grove, Flight 03 name_short: ptpinole_wg_flt03 description: Flight over west grove of Eucalyptus trees, 390ft, 90% overlap, 75 degrees off-nadir proj: ptpin loc: ptpinole subloc: westgrove contact: Andy Lyons pilot: Andy Lyons data_url: https://drive.google.com/file/d/1ZpMrYY0xxxxxxxxxxxxxxx uas_flds_oem() ##  [1] \"name_short\"  \"name_long\"   \"description\" \"proj\"        \"loc\"         ##  [6] \"pilot\"       \"contact\"     \"uav\"         \"data_url\"    \"tags\"        ## [11] \"notes\" my_dirs <- c(\"D:/uas/HREC/Watershed1/Data/2017-01-16_X5/Flight01_1514_1526_400ft\",              \"D:/uas/HREC/Watershed1/Data/2017-01-16_X5/Flight02_1532_1540_400ft\")  uas_metadata_make(dirs = my_dirs) metadata_lst <- list(name_short = \"ptpinol_wg_flt03\",                      name_long = \"Point Pinole, West Grove, Flight 03\",                      description = \"Flight over west grove of Eucalyptus trees\",                      contact = \"Andy Lyons\",                      notes = \"There might be a cloud shadow half way thru the flight\")  flt1_info <- uas_info(\"D:/uas/PtPinole/imgs/wg/wg_flt01\",                        metadata = metadata_lst,                       cache = TRUE)"},{"path":[]},{"path":"https://ucanr-igis.github.io/uasimg/articles/uasimg.html","id":"flight-summaries","dir":"Articles","previous_headings":"Creating Data Catalogs","what":"Flight Summaries","title":"Managing Drone Images with uasimg","text":"uasimg can generate simple HTML pages show location properties images folder (sample). generically referred ‘Flight Summaries’, even though sometimes images multiple flights saved one folder. Flight summaries may include interactive map camera locations, estimated footprints, image thumbnails. Histograms show distribution estimated ground sampling distance (GSD) forward overlap. stand-alone HTML pages can viewed locally, zipped emailed colleagues, uploaded web server. can also create ‘Table Contents’ page several Flight Summaries using uas_toc() (see ). Create Flight Summaries uas_report(). main argument required flight info object uas_info(). Notes: uas_report() several optional arguments can use tailor Flight Summary: output_dir. save HTML file(s). default sub-folder image folder called ‘map’. thumbnails. TRUE, generate preview images popup windows interactive map. show_gps_coord. Display image GPS coordinate popup windows. show_local_dir. Report local directory images saved. report_title. Customize report title. png_map. Create static png image showing camera locations (see ). attachments. Create link KML file camera locations /flight area (minimum convex polygon images) (see ). open_report. Open HTML page done. png_map = TRUE, uasimg attempt download background image entire flight area Google Maps Stamen. background image appear Flight Summary, useful types previews, including markdown Table Contents (). use satellite image background, must pass Google Maps API key google_api argument save API key environment variable ahead time (see help page details). Alternately background image terrain map Stamen. attachments = 'mcp_kml', minimum convex polygon images exported KML file, link file added Flight Summary. reasonable proxy flight area, can used fly area , see ’ve already flown. Many flight planning apps allow import KML file.","code":"uas_report(flt1_info)"},{"path":"https://ucanr-igis.github.io/uasimg/articles/uasimg.html","id":"creating-a-table-of-contents-of-flight-summaries","dir":"Articles","previous_headings":"Creating Data Catalogs","what":"Creating a Table of Contents of Flight Summaries","title":"Managing Drone Images with uasimg","text":"uas_toc() creates Table Contents (TOC) multiple Flight Summaries created uas_report() (sample). main argument uas_toc() character vector HTML file names (.e., returned uas_report()). TOC page include links Flight Summaries wherever may hard drive. optional gather_dir argument allows copy Flight Summary HTML files dependencies (e.g., thumbnail images, KML files) single folder. allows create TOC page Flight Summaries across hard drive single folder, can FTPed web server. Additional arguments use customize appearance TOC page include: toc_title. Title page. toc_desc. Short description tag line. summary_map. Show summary map flight areas. header_html footer_html. HTML files insert top bottom Table Contents page. open_toc. Open TOC browser.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/articles/uasimg.html","id":"example-creating-an-image-catalog-for-several-flights","dir":"Articles","previous_headings":"Creating Data Catalogs > Creating a Table of Contents of Flight Summaries","what":"Example: Creating an Image Catalog for Several Flights","title":"Managing Drone Images with uasimg","text":"following example illustrates loop set image folders, create Flight Summary one, compile TOC .","code":"## Create a character vector of folders img_dirs <- c(\"D:/Pix4D/PtPinole/imgs/eg/eg_flt1_p4p_sw\",               \"D:/Pix4D/PtPinole/imgs/eg/eg_flt1_p4p_se\",               \"D:/Pix4D/PtPinole/imgs/eg/eg_flt2_m2p\",               \"D:/Pix4D/PtPinole/imgs/eg/eg_flt3_m2p\",               \"D:/Pix4D/PtPinole/imgs/wg/wg_flt01\",               \"D:/Pix4D/PtPinole/imgs/wg/wg_flt02\",               \"D:/Pix4D/PtPinole/imgs/wg/wg_flt03\")  ## Save the metadata from these flights into a single object flts_info <- uas_info(img_dirs, cache = TRUE)  ## Create individual flight summaries flts_sum <- uas_report(flts_info, show_local_dir = TRUE, thumbnails = TRUE,                          show_gps_coord = TRUE, overwrite_html = TRUE,                          open_report = FALSE, attachments = \"mcp_kml\", png_map = TRUE)  ## Create TOC, copying all the individual HTML files to one place uas_toc(flts_sum,          output_dir = \"D:/Pix4D/catalog/ptpinole\",         toc_title = \"Point Pinole Eucalyptus Survey Flights\",          gather_dir = \".\",          overwrite_toc = TRUE,          open_toc = TRUE)"},{"path":"https://ucanr-igis.github.io/uasimg/articles/uasimg.html","id":"exporting-image-collection-geometry","dir":"Articles","previous_headings":"","what":"Exporting Image Collection Geometry","title":"Managing Drone Images with uasimg","text":"can export geometry flight using uas_exp_kml() uas_exp_shp(). Features include image centroids, (estimated) footprints, MCP (minimum convex polygon). Layers exported Shapefiles, common file format GIS data. Notes: Specify feature(s) want export using ctr, fp, mcp arguments. output_dir lets specify want files exported. default location sub-folder called map image folder. combine geometries several flights single GIS file, pass combine_feats = TRUE value combine_fn. finer control export process, including exporting different file formats, can dig object returned uas_info() use export function another package like sf::st_write().","code":"## Export  uas_exp_shp(flts_sum, ctr = TRUE, fp = TRUE, mcp = TRUE) uas_exp_kml(flts_sum, ctr = TRUE, fp = TRUE, mcp = TRUE)"},{"path":"https://ucanr-igis.github.io/uasimg/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andy Lyons. Author, maintainer. Regents University California. Copyright holder.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Andrew Lyons R Development Core Team (2024). uasimg: Drone Images Utilities. R package version 1.9.0. https://ucanr-igis.github.io/uasimg/","code":"@Manual{,   title = {uasimg: Drone Images Utilities},   author = {Andrew Lyons and {R Development Core Team}},   year = {2024},   note = {R package version 1.9.0},   url = {https://ucanr-igis.github.io/uasimg/}, }"},{"path":[]},{"path":"https://ucanr-igis.github.io/uasimg/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://ucanr-igis.github.io/uasimg/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement andlyons@ucanr.edu. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://ucanr-igis.github.io/uasimg/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to uasimg","title":"Contributing to uasimg","text":"outlines propose change uasimg.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to uasimg","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to uasimg","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://ucanr-igis.github.io/uasimg/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to uasimg","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"ucanr-igis/uasimg\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to uasimg","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to uasimg","text":"Please note uasimg project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/index.html","id":"drone-image-utilities","dir":"","previous_headings":"","what":"Drone Image Utilities","title":"Drone Image Utilities","text":"uasimg helps manage images taken unoccupied aerial vehicle (UAV, drone) collected intent stitch 2D 3D products photogrammetry software. package stitch images, helps create catalogs image data, examine locations properties, export image centroids estimated footprints GIS files, prepare images visualization analysis GIS remote sensing applications.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Drone Image Utilities","text":"uasimg developed help following common data management tasks: quick check field photos flight, assessing locations estimated image overlap. can help pilot determine flight successful, needs redone. Organizing images structured folder trees based project, location, platform, etc. Subsetting images processing photogrammetry (stitching) software like Pix4Dmapper OpenDroneMap. example omitting images extreme amount overlap can actually improve photogrammetry results reduce processing time. Creating individual Flight Summary pages HTML, backbone image catalog, higher level ‘Table Contents’ pages groups related flights (e.g., site). Converting images one format another (e.g., DNG JPG), preserving image metadata needed photogrammetry. Creating world files individual drone images, using image EXIF data model ground footprint rotation, can imported GIS software appear approximate location. Note: image locations footprints based metadata saved image files (e.g., relative altitude launch point, camera compass direction), estimates . Exporting individual images pseudo-georeferenced GeoTIFFs, can pixel operations remote sensing tools pixel classification, spatial overlays, object detection, zonal stats, etc.","code":""},{"path":[]},{"path":"https://ucanr-igis.github.io/uasimg/index.html","id":"install-from-r-universe","dir":"","previous_headings":"Installation","what":"Install from R-Universe","title":"Drone Image Utilities","text":"uasimg CRAN (yet), can install R-Universe (recommended):","code":"options(repos = c(ajlyons = 'https://ajlyons.r-universe.dev',                   CRAN = 'https://cloud.r-project.org'))  install.packages('uasimg')"},{"path":"https://ucanr-igis.github.io/uasimg/index.html","id":"install-from-github","dir":"","previous_headings":"Installation","what":"Install from GitHub","title":"Drone Image Utilities","text":"Alternately, can install GitHub: Note: Windows users need RTools build packages source files (basically install GitHub). RTools R package, rather set utilities install separately. can download install RTools https://cran.r-project.org/bin/windows/Rtools/. Alternately, can install RTools within R running: RTools installed, install uasimg GitHub :","code":"install.packages('installr') installr::install.Rtools() ## install.packages('remotes') remotes::install_github(\"ucanr-igis/uasimg\")"},{"path":[]},{"path":"https://ucanr-igis.github.io/uasimg/index.html","id":"exiftool","dir":"","previous_headings":"Dependencies","what":"exiftool","title":"Drone Image Utilities","text":"read EXIF data image files, uasimg requires external command line tool called ‘exiftool’. can install exiftool running: verify worked: Alternately, can install exiftool manually downloading http://www.sno.phy.queensu.ca/~phil/exiftool/. sure unzip folder path (e.g, c:), rename executable file exiftool(-k).exe exiftool.exe, pass use_exiftoolr = FALSE call uas_info().","code":"exiftoolr::install_exiftool() exiftoolr::exif_version() #> Using ExifTool version 12.50 #> [1] \"12.50\""},{"path":"https://ucanr-igis.github.io/uasimg/index.html","id":"dependent-packages","dir":"","previous_headings":"Dependencies","what":"Dependent Packages","title":"Drone Image Utilities","text":"uasimg requires several dependent packages, including sf, dplyr, tidyr, leaflet, htmltools, several suggested packages specific features (see DESCRIPTION file complete list). Normally missing packages installed time, get error message missing package(s), install dependent packages separately (.e., ‘Packages’ pane RStudio) run remotes::install_github(\"ucanr-igis/uasimg\", dependencies=FALSE).","code":""},{"path":"https://ucanr-igis.github.io/uasimg/index.html","id":"supported-cameras","dir":"","previous_headings":"","what":"Supported Cameras","title":"Drone Image Utilities","text":"see list known cameras (sensors), run uas_cameras() arguments. camera listed, may submit issue GitHub added, pass camera parameters csv file. details see help page (?uas_cameras) contact package author.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/index.html","id":"data-requirements","dir":"","previous_headings":"","what":"Data Requirements","title":"Drone Image Utilities","text":"Virtually functions uasimg use location data saved EXIF data (header) image files . assumes camera saves location images using GPS coordinate drone camera . compute footprints, package also needs know -ground height images taken. drones (including many DJI drones) record relative flight altitude (launch point) image file, others don’t (notably many multispectral cameras). Flight height can also entered manually argument run uas_info(). Requirements uasimg therefore include: images must GPS coordinates saved image files grouped folders (typically one flight per folder) camera must one ones known uasimg package (see ) Additional requirements generate estimated footprints: height ground level must saved image files, passed argument. passed argument, assumption images taken height. presumed images taken nadir (camera pointing straight )","code":""},{"path":"https://ucanr-igis.github.io/uasimg/index.html","id":"usage-overview","dir":"","previous_headings":"","what":"Usage Overview","title":"Drone Image Utilities","text":"always start uas_info(), feeding one folders drone images. function extracts image information, computes footprints, reads supplemental flight metadata (see also article Flight Metadata). object returned uas_info() useful . results generally saved variable fed functions useful things, : uas_report() creates ‘Flight Summaries’ standalone HTML pages, options create image thumbnails (sample). Flight summaries also grouped using uas_toc(), generates Table Contents page several Flight Summaries, options copy catalog files single folder catalog one place (sample). uas_exp_shp() uas_exp_kml() exports flight geometries (image centroids, image footprints, /flight area) Shapefiles KML files. KML files can imported flight planning software refly area /plan flight adjacent area. uas_worldfile() creates small external XML files allow images imported GIS software appear approximate footprint. uas_convert() converts image files one format another. uas_move() moves images standardized directory tree based metadata info, see Managing Drone Images uasimg Vignette function help pages.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/index.html","id":"example","dir":"","previous_headings":"Usage Overview","what":"Example","title":"Drone Image Utilities","text":"general usage first create flight info object one directories images using uas_info() function. Save result variable: want record additional metadata flight whole, can create metadata.txt file image folder uas_metadata_make(). Edit metadata.txt file Notepad (another text editor), save , run uas_info() . flight info object created, can start generate outputs.","code":"library(uasimg) hast_ft1_info <- uas_info(\"c:/Drone_Projects/Hastingsx/Flt01_1443_1446_250ft\") uas_metadata_make(hast_ft1_info, open = TRUE) ## Generate a flight summary uas_report(hast_ft1_info)  ## Export image centroid, footprints, and minimum convex polygon as Shapefiles uas_exp_shp(hast_ft1_info)  ## Generate estimated world files so the images can be imported into ArcGIS or QGIS uas_worldfile(hast_ft1_info)"},{"path":"https://ucanr-igis.github.io/uasimg/index.html","id":"utilities-for-individual-images","dir":"","previous_headings":"","what":"Utilities for Individual Images","title":"Drone Image Utilities","text":"following utilities can help visualize analyze individual images. functions based modeled image footprints, described require camera record relative altitude ground.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/index.html","id":"world-files","dir":"","previous_headings":"Utilities for Individual Images","what":"World Files","title":"Drone Image Utilities","text":"Drone images typically save coordinates camera, include width, length, compass angle. “world file” small external text file (also known sidecar file) contains additional parameters. files allow GIS programs like ArcGIS Pro QGIS display image approximate footprint ground. can create world files, readable ArcGIS QGIS, uas_worldfile(). uas_worldfile() can create three types world files, including aux.xml, jpw tfw, prj files. aux.xml recognized format hence default. See uas_worldfile() help page details.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/index.html","id":"cropping-the-center-of-images","dir":"","previous_headings":"Utilities for Individual Images","what":"Cropping the Center of Images","title":"Drone Image Utilities","text":"Sometimes images simply stitch, forcing analysis visualization individual images. uas_cropctr() crops center part image (normally least amount distortion image taken nadir). function also produce world file cropped center, can visualized together GIS software kind crude mosaic. uas_cropctr() provides arguments specify tall wide make crop, can set average forward distance images average side distance flight lines. resulting mosaic orthorectified, may good enough visualization /object detection particularly area flat.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/index.html","id":"exporting-images-as-psuedo-georefrenced-tiffs","dir":"","previous_headings":"Utilities for Individual Images","what":"Exporting Images as Psuedo-Georefrenced TIFFs","title":"Drone Image Utilities","text":"Many remote sensing tools can read WorldFiles. cases, can export individual images modeled footprint GeoTIFFs. may allow example traditional remote sensing analyses including spatial joins queries (e.g., field data), pixel classification, zonal statistics, using Deep Learning / CNN methods detect objects, etc. See uas_exp_geotiff() details.","code":""},{"path":[]},{"path":"https://ucanr-igis.github.io/uasimg/index.html","id":"bugs-questions-and-feature-requests","dir":"","previous_headings":"Get Involved!","what":"Bugs, Questions, and Feature Requests","title":"Drone Image Utilities","text":"report bug, add camera package, suggest new feature, please create issue GitHub, contact package author.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/index.html","id":"code-of-conduct","dir":"","previous_headings":"Get Involved!","what":"Code of Conduct","title":"Drone Image Utilities","text":"Please note uasimg project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://ucanr-igis.github.io/uasimg/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://ucanr-igis.github.io/uasimg/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://ucanr-igis.github.io/uasimg/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://ucanr-igis.github.io/uasimg/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://ucanr-igis.github.io/uasimg/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2020 UCANR  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. uasimg Copyright (C) 2020 UCANR This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://ucanr-igis.github.io/uasimg/reference/findonpath.html","id":null,"dir":"Reference","previous_headings":"","what":"findonpath — findonpath","title":"findonpath — findonpath","text":"Searches file system environment path","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/findonpath.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"findonpath — findonpath","text":"","code":"findonpath(fn, status = TRUE, quote = TRUE)"},{"path":"https://ucanr-igis.github.io/uasimg/reference/findonpath.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"findonpath — findonpath","text":"fn filename search (without path) status Show messages quote Enclose returned filename quotes","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/findonpath.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"findonpath — findonpath","text":"full path name found file, NULL found","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/findonpath.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"findonpath — findonpath","text":"return first found occurence file fn, searching 1) current working directory, 2) user's R 'home' directory, 3) directories operating system environment 'path'","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/geo2utm.html","id":null,"dir":"Reference","previous_headings":"","what":"Look up UTM zone — geo2utm","title":"Look up UTM zone — geo2utm","text":"Finds UTM zone geographic coordinate","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/geo2utm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Look up UTM zone — geo2utm","text":"","code":"geo2utm(x, lat = NULL)"},{"path":"https://ucanr-igis.github.io/uasimg/reference/geo2utm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Look up UTM zone — geo2utm","text":"x Longitude decimal degrees. Can also numeric vector length 2 containing longitude latitude values. lat Latitude decimal degrees","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/geo2utm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Look up UTM zone — geo2utm","text":"crs object correct UTM zone","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/geo2utm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Look up UTM zone — geo2utm","text":"return crs object (sf package) correct UTM zone.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/m2ft.html","id":null,"dir":"Reference","previous_headings":"","what":"Unit conversion functions — m2ft","title":"Unit conversion functions — m2ft","text":"Unit conversion functions","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/m2ft.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unit conversion functions — m2ft","text":"","code":"m2ft(x)  ft2m(x)  cm2in(x)  msq2acres(x)  msq2ha(x)"},{"path":"https://ucanr-igis.github.io/uasimg/reference/m2ft.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unit conversion functions — m2ft","text":"x numeric vector convert","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/m2ft.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unit conversion functions — m2ft","text":"vector converted values","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/m2ft.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Unit conversion functions — m2ft","text":"unit conversion functions vectorized.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/m2ft.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Unit conversion functions — m2ft","text":"ft2m(): Feet meters cm2in(): Centimeters inches msq2acres(): Meters squared acres msq2ha(): Meters squared hectacres","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/null2na.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert NULL values to NA — null2na","title":"Convert NULL values to NA — null2na","text":"Convert NULL values NA","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/null2na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert NULL values to NA — null2na","text":"","code":"null2na(x)"},{"path":"https://ucanr-igis.github.io/uasimg/reference/null2na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert NULL values to NA — null2na","text":"x value","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/null2na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert NULL values to NA — null2na","text":"value","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/null2na.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert NULL values to NA — null2na","text":"internal function used convert NULL values NA. useful () statements checking value object may possibly exist. function ** vectorized.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://ucanr-igis.github.io/uasimg/reference/print.uas_grp.html","id":null,"dir":"Reference","previous_headings":"","what":"Prints a UAS Image Collection Groups object — print.uas_grp","title":"Prints a UAS Image Collection Groups object — print.uas_grp","text":"Prints UAS Image Collection Groups object","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/print.uas_grp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prints a UAS Image Collection Groups object — print.uas_grp","text":"","code":"# S3 method for class 'uas_grp' print(x, ...)"},{"path":"https://ucanr-igis.github.io/uasimg/reference/print.uas_grp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prints a UAS Image Collection Groups object — print.uas_grp","text":"x UAS Image Collection Groups object ... unused","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/print.uas_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a summary of UAS metadata — print.uas_info","title":"Print a summary of UAS metadata — print.uas_info","text":"Print summary metadata UAS image collection","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/print.uas_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a summary of UAS metadata — print.uas_info","text":"","code":"# S3 method for class 'uas_info' print(x, metadata = TRUE, ...)"},{"path":"https://ucanr-igis.github.io/uasimg/reference/print.uas_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a summary of UAS metadata — print.uas_info","text":"x UAS Image Collection object metadata Show additional meta data info ... arguments (unused)","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/print.uas_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print a summary of UAS metadata — print.uas_info","text":"Prints summary drone images metadata collection object","code":""},{"path":[]},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_cameras.html","id":null,"dir":"Reference","previous_headings":"","what":"Cameras — uas_cameras","title":"Cameras — uas_cameras","text":"Returns names known cameras Read cameras.csv file","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_cameras.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cameras — uas_cameras","text":"","code":"uas_cameras(names_only = TRUE)  uas_readcameras(cameras_fn)"},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_cameras.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cameras — uas_cameras","text":"names_only Return camera names cameras_fn file name (including path) cameras.csv file","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_cameras.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cameras — uas_cameras","text":"character vector containing names cameras known uasimg package","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_cameras.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cameras — uas_cameras","text":"order estimate GSD image footprint, certain properties camera required, including focal length physical dimension CCD sensor. Properties several commonly used cameras collected bundled package csv file. drone camera database, can still index images uas_info, however generic camera settings (EXIF fields) used. cases, settings work fine get GPS coordinates timestamps, however able model --ground image footprint. add camera database, can start issue GitHub, contact package author email. Alternately, can find cameras.csv file package folder (run system.file(\"cameras/cameras.csv\", package = \"uasimg\")), add row camera. copy csv file pass file name value cameras uas_info. utility function read cameras.csv file. Note certain columns required. see example valid CSV file, run uas_cameras(names_only = FALSE)","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_cameras.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Cameras — uas_cameras","text":"uas_readcameras(): Read cameras csv file","code":""},{"path":[]},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_cameras.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cameras — uas_cameras","text":"","code":"if (FALSE) { # \\dontrun{ uas_cameras() } # }  if (FALSE) { # \\dontrun{ uas_readcameras(system.file(\"cameras/cameras.csv\", package=\"uasimg\")) } # }"},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_convert.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert file format — uas_convert","title":"Convert file format — uas_convert","text":"Convert image file formats preserving EXIF data","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_convert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert file format — uas_convert","text":"","code":"uas_convert(   x,   dir_out = NULL,   idx = NULL,   format_out = c(\"jpg\", \"tif\")[1],   quality = 90,   copy_exif = TRUE,   overwrite = FALSE,   quiet = FALSE )"},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_convert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert file format — uas_convert","text":"x vector filenames (path), object class 'uas_info' dir_out output directory(s) idx Row numbers images (optional) format_out output format quality quality level jpg compression (0..100), larger numbers produce better image quality copy_exif Whether copy original EXIF info new file, logical overwrite Overwrite existing files, logical quiet Suppress messages, logical","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_convert.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert file format — uas_convert","text":"function converts image formats. Images converted using `magick` package (calls ImageMagick libraries), EXIF data copied using exiftool. Supported output formats include JPG TIFF. x can vector image file names (including path), image metadata object (created uas_info). idx (row numbers) passed, used select images convert. dir_out name directory converted images output. NULL, images placed directory input images. x object class `uas_info`, dir_out can vector directories equal length number folders indexed x (case converted images placed corresponding output directory). quality sets compression ratio jpg images. preserve high level fidelity improve odds successful stitching,  recommended set quality 90 higher. format_out = \"tif\", output files saved uncompressed tif files.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_convert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert file format — uas_convert","text":"","code":"if (FALSE) { # \\dontrun{ ## Make a list of DNG files to convert files_dng <- list.files(\"D:/uas/mavic_pro/raw\",                         pattern = \".DNG$\",                         full.names = TRUE,                         ignore.case = TRUE)  uas_convert(files_dng,             dir_out = \"D:/uas/mavic_pro/jpg\",             format_out = \"jpg\") } # }"},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_cropctr.html","id":null,"dir":"Reference","previous_headings":"","what":"Crop out the center of images — uas_cropctr","title":"Crop out the center of images — uas_cropctr","text":"Crop center images","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_cropctr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crop out the center of images — uas_cropctr","text":"","code":"uas_cropctr(   x,   crp_h = 10,   crp_w = 10,   dir_out = \".\",   out_prefix = \"\",   out_suffix = \"_crp\",   overwrite = FALSE,   quiet = FALSE )"},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_cropctr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crop out the center of images — uas_cropctr","text":"x list class 'uas_info' crp_h Height crop box (meters) crp_w Width crop box (meters) dir_out output directory cropped images out_prefix character object pre-pended output file names out_suffix character object suffixed output file names (extension) overwrite Overwrite existing files, T/F quiet Suppress messages printing pandoc command line, T/F","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_cropctr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crop out the center of images — uas_cropctr","text":"vector image files created","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_cropctr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Crop out the center of images — uas_cropctr","text":"function crop around center set images. can used create photomosaic. photos taken nadir (.e., straight ), center region photo often least distorted. images world files created (see uas_worldfile), cropped images world files also. images cropped minimize amount overlap , world files, viewing GIS software results basic photo mosaic (albeit without stitching blending). function requires command line version gdal installed. instructions see http://gdal.org. Windows users can download gdal installation file (*.msi) http://www.gisinternals.com/release.php, install software, add installation directory system path (using Windows Control Panel >> System >> Advanced), restart RStudio. see worked, run Sys.(\"gdal_translate\"). images collected grid pattern, can use average distance centers value `crp_h`, average distance flight lines `crp_w`. result cropped images edges just touching. `crp_h` `crp_w` expressed meters.","code":""},{"path":[]},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_dirs_find.html","id":null,"dir":"Reference","previous_headings":"","what":"Search directories for images — uas_dirs_find","title":"Search directories for images — uas_dirs_find","text":"Find sub-directories contain images","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_dirs_find.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search directories for images — uas_dirs_find","text":"","code":"uas_dirs_find(x, ext = c(\"jpg\", \"tif\"), min_images = 3, exclude_tb = TRUE)"},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_dirs_find.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search directories for images — uas_dirs_find","text":"x base directory ext character vector file extensions search (excluding '.') min_images minimum number image files directory must contain included results exclude_tb Exclude folders called 'tb' (thumbnails)","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_dirs_find.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search directories for images — uas_dirs_find","text":"tibble 3 columns: path, ext, num_files.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_dirs_find.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search directories for images — uas_dirs_find","text":"function recurses sub-directories `x` returns contain image files. can used help identify folders need cataloged. directories least min_images image files returned. exclude_tb = TRUE, directories named `tb` (uas_thumbnails_make saves thumbnail images) excluded. Hidden directories directories start `.` excluded.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_exp_geotiff.html","id":null,"dir":"Reference","previous_headings":"","what":"Export individual images as a pseudo-georectified GeoTIFF — uas_exp_geotiff","title":"Export individual images as a pseudo-georectified GeoTIFF — uas_exp_geotiff","text":"Export individual images  pseudo-georectified GeoTIFF","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_exp_geotiff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export individual images as a pseudo-georectified GeoTIFF — uas_exp_geotiff","text":"","code":"uas_exp_geotiff(   x,   flt = NULL,   idx = NULL,   method = c(\"near\", \"binlinear\", \"cubic\")[1],   crs = NULL,   dir_out = \".\",   overwrite = FALSE,   use_tmpdir = FALSE,   quiet = FALSE )"},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_exp_geotiff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export individual images as a pseudo-georectified GeoTIFF — uas_exp_geotiff","text":"x list class 'uas_info' flt flight(s) x process (default ) idx row numbers (.e., images) selected flights process (default ) method Resampling method use rotation crs coordinate reference system output file dir_out output directory (default folder source images) overwrite Overwrite existing files use_tmpdir Use temp directory quiet Show messages.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_exp_geotiff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export individual images as a pseudo-georectified GeoTIFF — uas_exp_geotiff","text":"list filenames generated.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_exp_geotiff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Export individual images as a pseudo-georectified GeoTIFF — uas_exp_geotiff","text":"function export individual image(s) pseudo-georectified GeoTIFF, using estimated ground footprint modeled EXIF data. self-evident footprints considered approximate best, modeled ) -launch-point elevation, b) GPS location, c) yaw, d) camera parameters (error). Note: goal simply view individual images approximate location desktop GIS software, function probably overkill (use uas_worldfile instead). prerequisite using function computed footprints first created image collection object (words, sure pass pass fp = TRUE run uas_info). function also requires `terra` installed. method name resampling method used create pseudo-georectified image. default near fastest give reasonably good results. See also terra::resample(). crs pseudo-georectified image crs image collection object (.e., UTM). can override crs argument. provided, crs provided text <authority:number> code (e.g., \"epsg:4326\") WKT syntax. details see terra::project(). Note rectifying (unrotating) images can take long time result much larger image files (GeoTiffs uncompressed). can use flt idx arguments specify flight(s) images(s) within selected flights respectively export. function tested JPG files DJI cameras. yet fully tested TIF files multispectral cameras, may work formats (contact package author want try). Un-rotating images requires write permission directory input images saved (write temporary worldfile). write permission images reside, pass use_tmpdir = TRUE. make temporary copy image temp directory.","code":""},{"path":[]},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_exp_kml.html","id":null,"dir":"Reference","previous_headings":"","what":"Export flight area and camera locations for GIS — uas_exp_kml","title":"Export flight area and camera locations for GIS — uas_exp_kml","text":"Export geometry(s) flight KML Shapefile","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_exp_kml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export flight area and camera locations for GIS — uas_exp_kml","text":"","code":"uas_exp_kml(   x,   flt = NULL,   ctr = FALSE,   fp = FALSE,   mcp = FALSE,   combine_feats = FALSE,   combine_fn = NULL,   output_dir = NULL,   out_fnbase = NULL,   create_dir = TRUE,   overwrite = FALSE,   quiet = FALSE,   flt_idx = deprecated() )  uas_exp_shp(   x,   flt = NULL,   ctr = FALSE,   fp = FALSE,   mcp = FALSE,   combine_feats = FALSE,   combine_fn = NULL,   output_dir = NULL,   out_fnbase = NULL,   create_dir = TRUE,   overwrite = FALSE,   quiet = FALSE,   flt_idx = deprecated() )"},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_exp_kml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export flight area and camera locations for GIS — uas_exp_kml","text":"x list class 'uas_info' flt Flight(s) x process (character numeric vector, default ) ctr Export image centroids, Logical fp Export image footprints, Logical mcp Export minimum convex polygon image footprints, logical combine_feats Combine features single Shapefile / KML, logical combine_fn File name (minus path extension) combined features layer output_dir output directory. NULL, layers saved 'map' sub-directory image folder out_fnbase base output filenames create_dir Create output directory exist, logical overwrite Overwrite existing files, Logical quiet Suppress messages, Logical flt_idx `r lifecycle::badge(\"deprecated\")` Use `flt` instead","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_exp_kml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export flight area and camera locations for GIS — uas_exp_kml","text":"vector filenames","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_exp_kml.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Export flight area and camera locations for GIS — uas_exp_kml","text":"flt allows specify subset image folders x process. can pass vector flight names (use names(x) see ) integers. ctr, fp, mcp (TRUE/FALSE) specify geometry(s) export. Output file names generated flight metadata saved uas_info object. Alternately, can pass base file name using out_fnbase. can specify output directory output_dir. default save sub-directory images directory called 'map', created needed. combine_feats = TRUE, geometries folders x combined single KML Shapefile. happen, must also pass value combine_fn (base file name combined features).","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_exp_kml.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Export flight area and camera locations for GIS — uas_exp_kml","text":"uas_exp_shp(): Export flight info Shapefile","code":""},{"path":[]},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_getcache.html","id":null,"dir":"Reference","previous_headings":"","what":"Manage cache directory — uas_getcache","title":"Manage cache directory — uas_getcache","text":"View set directory extracted EXIF data cached","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_getcache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manage cache directory — uas_getcache","text":"","code":"uas_getcache(default = TRUE, quiet = FALSE)  uas_setcache(dir = \"~/.R/uasimg\", write = FALSE, quiet = FALSE)  uas_clearcache(quiet = FALSE)"},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_getcache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manage cache directory — uas_getcache","text":"default Use default cache directory set quiet Suppress messages dir directory  cached EXIF data (must exist) write Write directory location .Renviron","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_getcache.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Manage cache directory — uas_getcache","text":"Extracting exif data large number images can take awhile. avoid folder images, results can saved (cached) local directory choice. cache = TRUE  uas_info, R first look see EXIF data already extracted image folder, use instead running exiftool. Cached results saved native R objects. Cache files store EXIF data folder images, however images removed added directory, cached results nullified exiftool run . Cached EXIF data include supplemental flight metadata provide metadata text files (see uas_metadata_make, pilot's name location name. uas_getcache() retrieves current cache directory, uas_setcache() sets . default location (~/.R/uasimg). uas_setcache() run write = TRUE, setting persistent across R sessions (generally recommended). uas_clearcache() delete cached EXIF data, sometimes called package update.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_getcache.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Manage cache directory — uas_getcache","text":"uas_setcache(): Set cache directory uas_clearcache(): Clear cache directory","code":""},{"path":[]},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_grp_flt.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse an image collection into individual flights — uas_grp_flt","title":"Parse an image collection into individual flights — uas_grp_flt","text":"Parse image collection individual flights","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_grp_flt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse an image collection into individual flights — uas_grp_flt","text":"","code":"uas_grp_flt(   x,   interflt_val = 10,   interflt_units = c(\"med_int\", \"secs\")[1],   init_fltnum = 1,   min_images = 5,   cross_dirs = TRUE,   options = NULL,   quiet = FALSE )"},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_grp_flt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse an image collection into individual flights — uas_grp_flt","text":"x list class 'uas_info' interflt_val Time value flights interflt_units Time units flights, see details \"med_int\" \"secs\" init_fltnum Initial flight number min_images Minimum number images considered flight cross_dirs Parse images directories collectively options Options overrides creating groups quiet Suppress messages","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_grp_flt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse an image collection into individual flights — uas_grp_flt","text":"cross_dirs means images directories examined look flights. appropriate images one flight spread across multiple folders.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract metadata info from UAS images — uas_info","title":"Extract metadata info from UAS images — uas_info","text":"Extracts info geotagged images taken drone","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract metadata info from UAS images — uas_info","text":"","code":"uas_info(   img_dirs,   ext = NULL,   alt_agl = NULL,   fp = FALSE,   fwd_overlap = fp,   cameras = NULL,   metadata = \"metadata.*\\\\.txt\",   path2name_fun = NULL,   use_exiftoolr = TRUE,   exiftool = NULL,   exif_csv = NULL,   cache = TRUE,   update_cache = FALSE,   quiet = FALSE )"},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract metadata info from UAS images — uas_info","text":"img_dirs Directory(s) image files reside ext optional file extension alt_agl elevation ground level meters (optional images relevative altitude saved) fp Compute image foot prints, T/F fwd_overlap Whether compute amount overlap one image next, T/F cameras Location cameras.csv file. NULL package csv file used. metadata filename pattern metadata file, metadata list object (see Details) path2name_fun function generate default short name (see Details) use_exiftoolr Whether use exiftoolr package, logical exiftool path exiftool command line tool (omit OS path). Ignored use_exiftoolr = TRUE. exif_csv file name new csv file exif data saved (omit make temp one) cache Logical directory EXIF data cached (see Details) update_cache Whether update cache quiet show messages","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract metadata info from UAS images — uas_info","text":"UAS Image Collection object. named list elements image centroids (sf data frame), footprints, total area, minimum convex polygon, total directory size, data flown, external metadata.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract metadata info from UAS images — uas_info","text":"read EXIF header data directory image files, extract centroids estimated ground-footprints. Extracting image locations requires images geostamps (common drone images drones require extra processing step geostamp images). index specific file type, can pass file extension ext (case sensitive). Estimating ground-footprints (fp = TRUE) requires camera parameters known, flight elevation ground level either saved EXIF info provided alt_agl argument (meters). alt_agl passed, override elevation data EXIF info. Ground-footprints estimates . assume camera nadir (common mapping work exceptions) accurate provided altitude (typically least accurate GPS coordinate). Camera parameters saved csv file called cameras.csv. package ships CSV file containing many popular drone cameras. drone camera database, can create cameras.csv file (see uas_cameras details) pass file name cameras argument. contact package maintainer add camera database. function uses free command line tool called EXIFtool read EXIF data. can install running install_exiftool. Alternately can download exiftool http://www.sno.phy.queensu.ca/~phil/exiftool/. download , rename executable file, 'exiftool(-k).exe' 'exiftool.exe', save somewhere system's PATH (e.g., c:\\Windows). metadata optional argument pass supplemental flight metadata can extracted images (e.g., location name, pilot). details, see Vignette Flight Metadata vignette(\"flight_metadata\", package = \"uasimg\"). metadata can also named list containing metadata fields / values. supported field names, see vignette(\"flight_metadata\", package = \"uasimg\"). metadata can also filename regular expression (pattern) metadata text file (details write pattern expression, see list.files). recommended way enter metadata, little text files move images. multiple files match pattern expression, read. allows example file called metadata_org.txt organizational info (contact person), another called metadata.txt info specific flight (e.g., pilot wind conditions). Metadata text files plain text YAML format (easiest way create new metadata text files using uas_metadata_make.) line contain key:value pair (quotes delimiters). Lines starting hash forward slash ignored. Example: path2name_fun can function generate default short name flight. function written accept one one argument - directory path. can useful default short names constructed pieces image directory path. See also uas_path2name_fun. cache can logical value name directory EXIF data gets cached. cache = TRUE, default cache directory used (~/.R/uasimg). information gets cached image metadata. Flight metadata never cached (see Vignette Flight Metadata discussion image flight metadata). Cached EXIF data linked directory images based directory name total size image files. images added removed directory, cache automatically rebuilt next time function run. update_cache logical value forces update cached data TRUE.","code":"name_short: hrec_wtrshd2_flt03  name_long: Hopland Research and Extension Center, Watershed II Flight 3  data_url: https://ucdavis.box.com/s/dp0sdfssxxxxxsdf  pilot: Andy Lyons  description: These data were collected as part of a restoration monitoring program.  notes: We had to pause the mission about half way through as a hawk was getting close, hence there is a time lapse of about 45 seconds. Pix4Dcapture was used as the mission planning software with an overlap of 75"},{"path":[]},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_metadata_make.html","id":null,"dir":"Reference","previous_headings":"","what":"Create flight metadata text files — uas_metadata_make","title":"Create flight metadata text files — uas_metadata_make","text":"Create /edit flight metadata text files","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_metadata_make.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create flight metadata text files — uas_metadata_make","text":"","code":"uas_metadata_make(   x,   md_file = \"metadata.txt\",   md_suffix = NULL,   make_new = FALSE,   overwrite = FALSE,   open = TRUE,   md_flds = uas_getflds(),   md_template = NULL,   read_uasinfo = FALSE,   use_system_editor = FALSE,   quiet = FALSE )"},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_metadata_make.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create flight metadata text files — uas_metadata_make","text":"x character vector directories, uas_info object md_file Name file create md_suffix suffix append file names make_new Create new metadata file(s), Logical overwrite Overwrite existing metadata files, Logical open Open file editing md_flds character vector field names md_template template metadata file read_uasinfo Incorporate existing flight metadata already saved x (assuming x uas_info object) use_system_editor Whether open metadata files operating system text editor (opposed RStudio), Logical quiet Suppress messages","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_metadata_make.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create flight metadata text files — uas_metadata_make","text":"character vector external metadata text file(s) created.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_metadata_make.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create flight metadata text files — uas_metadata_make","text":"creates, /opens editing, supplemental metadata text file(s) image folders. make_new = TRUE, metadata files created directory x. x can either character vector uas_info object. files named based value md_file, option append suffix md_suffix. md_file md_suffix length 1 equal number x. open = TRUE, text file(s) opened. open existing metadata text files, let open = TRUE make_new = FALSE. default, files opened whichever text editor use R (see file.edit). use system text editor, let use_system_editor = TRUE. customize fields added flight metadata files, run uas_setflds first. pre-populate fields, pass path existing metadata file value md_template. md_template can either local file online (example).","code":""},{"path":[]},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_move.html","id":null,"dir":"Reference","previous_headings":"","what":"Move UAS images into sub-directories — uas_move","title":"Move UAS images into sub-directories — uas_move","text":"Move UAS images sub-directories","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_move.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Move UAS images into sub-directories — uas_move","text":"","code":"uas_move(   x,   flt = NULL,   tree,   outdir_base,   req_all_fltmdflds = TRUE,   create_dirs = \"ask\",   imgs_action = c(\"copy\", \"move\", \"none\")[1],   imgs_prepend_fn = FALSE,   write_metadata = TRUE,   preview_only = FALSE,   tb_action = imgs_action,   map_action = c(\"copy\", \"move\", \"none\")[3],   quiet = FALSE,   flt_idx = deprecated() )"},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_move.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Move UAS images into sub-directories — uas_move","text":"x list class 'uas_info' flt Flight(s) x process (character numeric vector, default ) tree Directory tree template filename character vector, see Details outdir_base Output directory root req_all_fltmdflds Require flight metadata fields directory tree template defined create_dirs Create output directory tree imgs_action action take images imgs_prepend_fn Whether th prepend image file names datestamp (ensure unique) write_metadata Write metadtata.txt file output image folder preview_only Preview directory tree tb_action action take thumbnail images saved default location map_action action take contents map folder quiet Suppress messages flt_idx `r lifecycle::badge(\"deprecated\")` Use `flt` instead","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_move.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Move UAS images into sub-directories — uas_move","text":"vector directory locations images copied / moved","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_move.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Move UAS images into sub-directories — uas_move","text":"req_all_fltmdflds means move anything unless uas_info objects tokens directory tree","code":""},{"path":[]},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_path2name_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a function that converts a directory path to a flight name — uas_path2name_fun","title":"Creates a function that converts a directory path to a flight name — uas_path2name_fun","text":"Creates function converts directory path flight name","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_path2name_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a function that converts a directory path to a flight name — uas_path2name_fun","text":"","code":"uas_path2name_fun(idx_from_last = 1)"},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_path2name_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a function that converts a directory path to a flight name — uas_path2name_fun","text":"idx_from_last Indices directory path, see Details","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_path2name_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a function that converts a directory path to a flight name — uas_path2name_fun","text":"function returns flight name","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_path2name_fun.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates a function that converts a directory path to a flight name — uas_path2name_fun","text":"return function parse directory path constituent pieces construct name one pieces. can useful automatically naming flights based directory path images saved running uas_info. idx_from_last indices subdirectories path, starting end. Hence wanted construct names flight based subdirctory (), let idx_from_last = 1. want names constructed based 2nd last subdirectory, let idx_from_last = 2, . one number passed idx_from_last, name returned concatenate pieces separated underscores. Note function actually convert directory path flight name, returns function conversion.","code":""},{"path":[]},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_path2name_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a function that converts a directory path to a flight name — uas_path2name_fun","text":"","code":"if (FALSE) { # \\dontrun{ data_dir <- \"D:/Drone_Data/HREC/PostRiverFire2020/imgs/ebX_Flt02_postproc/img/msp\" flight_name_fun <- uas_path2name_fun(c(5,3,1)) flight_name_fun(data_dir) ebee_flt2_info <- uas_info(data_dir, fp = FALSE, path2name_fun = flight_name_fun) } # }"},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_rename.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename UAS images — uas_rename","title":"Rename UAS images — uas_rename","text":"Rename UAS images","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_rename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename UAS images — uas_rename","text":"","code":"uas_rename(   x,   flt = NULL,   name_template = \"img{i}_{alt_agl}m_{camera_abbrev}_{Y}_{m}_{d}_{H}_{M}_{S}\",   all_lower = TRUE,   preview = TRUE,   confirm = TRUE,   flt_idx = deprecated() )"},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_rename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename UAS images — uas_rename","text":"x list class 'uas_info' flt Flight(s) x process (character numeric vector, default ) name_template template generating file names (see Details) all_lower Make file names lowercase, Logical preview Preview new names confirm Confirm continue changing file names flt_idx `r lifecycle::badge(\"deprecated\")` Use `flt` instead","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_rename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename UAS images — uas_rename","text":"tibble showing old new names image.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_rename.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rename UAS images — uas_rename","text":"function rename image files disk based naming template can include placeholders (tokens) image /flight metadata. can useful want rename image files based formula date-time parts, AGL altitude, flight metadata fields, camera type, etc. Renaming image files can helpful analysis individual images, generally needed photogrammetry whereby likely using directory names help identify groups images stitching. Caution advised using function, actually rename files! Use preview = TRUE test naming template. preview = TRUE, function return tibble 'old' 'new' names, actually change file names. flt allows specify subset image folders x process. can pass vector flight names (use names(x) see ) integers. ready, set preview = FALSE. Aafter renaming files, need rerun uas_info directory(s) update info.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_rename.html","id":"file-name-template","dir":"Reference","previous_headings":"","what":"File Name Template","title":"Rename UAS images — uas_rename","text":"name_template pattern containing placeholders ('tokens') curly brackets. run function, tokens swapped actual values. example, filename DJI_0213.JPG name template \"img_{Y}-{m}-{d}_{H}-{M}-{S}\", file renamed something like img_2018-06-17_13-04-46.jpg, numbers date time extracted image EXIF data. Supported tokens can use include: {} integer starting 1 going , padded enough leading zeros accommodate values {Y} year (4-digit) {y} year (2-digit) {m} month (2-digit) {d} day (2-digit) {j} Julian day {H} hour (2-digits) {M} minutes (2-digits) {S} seconds (2-digits) {camera_abbrev} abbreviated name camera {alt_agl} altitude launch point (usually meters). can indicate rounding adding comma number decimal places. example {alt_agl,0} round AGL value nearest whole number. option available images relative altitude saved EXIF data (excludes multi-spectral images). addition, name templates can include flight metadata field defined. example flight metadata information includes fields proj (project abbreviation) loc (location), name template include  {proj}  {loc}. creating name template, remember: 1) file names must come unique. easy way ensure include {} name template, replaced sequence integers. 2) File names include characters allowed file names. include < > : `\"` / \\ | ? *. characters found name_template, rejected. 3) name_template contain extension","code":""},{"path":[]},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Flight summaries — uas_report","title":"Flight summaries — uas_report","text":"Creates image collection summaries individual flights (folders)","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flight summaries — uas_report","text":"","code":"uas_report(   x,   flt = NULL,   group_img = FALSE,   thumbnails = FALSE,   show_local_dir = TRUE,   units = c(\"imperial\", \"metric\")[1],   report_title = \"Flight Summary\",   attachments = c(\"mcp_kml\", \"ctr_kml\")[0],   pts_col = NULL,   output_dir = NULL,   create_dir = TRUE,   output_file = NULL,   overwrite_html = FALSE,   open_report = FALSE,   self_contained = TRUE,   tbm_use = FALSE,   tbm_overwrite = FALSE,   tbm_size = 480,   tbm_src = c(\"Google\", \"Stadia\")[1],   tbm_api_key = NULL,   tbm_exp = 0.2,   report_rmd = NULL,   header_html = NULL,   footer_html = NULL,   use_tmpdir = FALSE,   quiet = FALSE,   show_gps_coord = lifecycle::deprecated(),   png_map = lifecycle::deprecated(),   png_exp = lifecycle::deprecated(),   google_api = lifecycle::deprecated(),   col = lifecycle::deprecated() )"},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flight summaries — uas_report","text":"x list class 'uas_info' flt Flight(s) x process (character numeric vector, default ) group_img Group images within ~1m 1 point thumbnails Display thumbnail images, logical show_local_dir Show local image directory, logical units imperial metric, character report_title Title appear top summary attachments Supplementary files create link flight summary, see Details. pts_col Color value(s) centroids /footprints output_dir NULL, placed 'map' sub-directory images create_dir Create output directory exist output_file Name HTML file. NULL default based name input directory chosen. overwrite_html Overwrite existing HTML files without warning, logical open_report Open HTML file browser self_contained Make output HTML file self-contained tbm_use Whether create PNG version map. May logical, dimensions output image pixels (see Details) tbm_overwrite Overwrite existing PNG files without warning, logical tbm_size size square flight thumbnail image pixels, number tbm_src API service use get flight thumbnail background image, see Details. tbm_api_key API key Google Static Maps Stadia, see Details. tbm_exp proportion expand bounding box PNG map, see Details. report_rmd Rmd template used generate HTML file. See Details. header_html HTML file name URL use header footer_html HTML file name URL use footer use_tmpdir Use temp dir processing quiet TRUE supress printing pandoc command line show_gps_coord `r lifecycle::badge(\"deprecated\")` nothing png_map `r lifecycle::badge(\"deprecated\")` Use tbm_use png_exp `r lifecycle::badge(\"deprecated\")` Use tbm_exp google_api `r lifecycle::badge(\"deprecated\")` col `r lifecycle::badge(\"deprecated\")` overwrite_png `r lifecycle::badge(\"deprecated\")` Use tbm_overwrite","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flight summaries — uas_report","text":"HTML file name(s) flight summaries generated","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_report.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Flight summaries — uas_report","text":"generate HTML report(s) images UAS metadata object based. group_img determinies whether images location represented single point map. common multi-spectral sensors take generate multiple images per location. 'location' determined looking 5th decimal place x y geographic coordinates (~1m). units defines whether units flight area, ground altitude, GSD reported imperial metric units. value output_dir passed, report saved sub-directory image directory called 'map'. sub-directory created create_dir = TRUE. self_contained determines whether HTML file(s) created JavaScript CSS files embedded HTML file , saved subdirectory called 'libs'. saving several reports one output directory, saving multiple HTML reports output directory, passing self_contained = FALSE efficient HTML report generated RMarkdown file. know edit RMarkdown, can modify default template pass filename preferred template using report_rmd argument. tbm_use determines whether thumbnail image flight downloaded Google StadiaMaps, saved output_dir. Although thumbnail image flight displayed flight summary report, used generated Table--Contents series flights, can useful standalone quick glance flight Windows Explorer, GitHub repos, etc. Note Google Maps StadiaMaps require API key (pass using tbm_api_key). API key one services, download thumbnail image flight. get API key Google Static Maps service, see https://developers.google.com/maps/documentation/maps-static/ (also number tutorials available). Note Google require credit card APIs, monthly quota get charged enough downloading thumbnail images drone flights. get API key StadiaMaps (credit card required), start . See ggmap package details. flight thumbnail image created dimensions given tbm_size. tbm_exp percentage flight bounding box used buffer around background map. map seems cropped, get warning message rows removed, try increasing . pts_col can used pass single color vector custom colors image locations (default rainbow color ramp). attachment specifies supplementary files create link flight summary. Choices ctr_kml mcp_kml KML versions camera locations MCP (minimum convex polygon around images). KML files created output directory flight summary.","code":""},{"path":[]},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_setflds.html","id":null,"dir":"Reference","previous_headings":"","what":"Manage supplemental metadata fields — uas_setflds","title":"Manage supplemental metadata fields — uas_setflds","text":"Set view default set supplemental metadata fields","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_setflds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manage supplemental metadata fields — uas_setflds","text":"","code":"uas_setflds(flds = NULL, reset = FALSE, quiet = FALSE)  uas_getflds()  uas_flds_oem()"},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_setflds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manage supplemental metadata fields — uas_setflds","text":"flds Character vector metadata fields reset Use default set metadata fields quiet Suppress messages","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_setflds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Manage supplemental metadata fields — uas_setflds","text":"functions allow define default set supplemental metadata fields can assigned image collections either function argument, small text file placed directory images. Note context 'supplemental metadata' refers bits information can automatically extracted images (e.g., name project pilot.) Creating default set supplemental metadata fields make mandatory, limit metadata fields can use. default set serves template new metadata.txt file created.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_setflds.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Manage supplemental metadata fields — uas_setflds","text":"uas_setflds(): Set default fields image collection metadata. uas_getflds(): Get default supplemental metadata field names. uas_flds_oem(): Get standard set image collection metedata fields","code":""},{"path":[]},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_thumbnails_make.html","id":null,"dir":"Reference","previous_headings":"","what":"Create image thumbnails — uas_thumbnails_make","title":"Create image thumbnails — uas_thumbnails_make","text":"Move UAS images sub-directories group","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_thumbnails_make.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create image thumbnails — uas_thumbnails_make","text":"","code":"uas_thumbnails_make(   x,   flt = NULL,   output_dir = NULL,   tb_width = 400,   rotate = FALSE,   overwrite = FALSE,   use_magick = FALSE,   stats = FALSE,   quiet = FALSE,   flt_idx = deprecated() )"},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_thumbnails_make.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create image thumbnails — uas_thumbnails_make","text":"x list class 'uas_info' flt Flight(s) x process (character numeric vector, default ) output_dir Output directory tb_width Thumbnail width rotate Rotate thumbnails camera yaw, Logical overwrite Overwrite existing files use_magick Use functions magick package stats Report amount time takes create thumbnail, logical quiet Suppress messages flt_idx `r lifecycle::badge(\"deprecated\")` Use `flt` instead","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_thumbnails_make.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create image thumbnails — uas_thumbnails_make","text":"named list (one element directory processed) thumbnail files created output directory","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_thumbnails_make.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create image thumbnails — uas_thumbnails_make","text":"create thumbnail images drone images x. default output folder sub-directory image folder called map/tb, created needed. location can overridden output_dir. dimensions thumbnails determined tb_width, height set automatically. flt allows specify subset image folders x process. can pass vector flight names (use names(x) see ) integers. rotate rotate thumbnails camera yaw. can make easier match ground features viewing thumbnails flight report. Note thumbnails rotated tb_width parameter sets width image rotation. width height rotated thumbnail vary according angle rotation. rotations look feel free contact package author, feature still experimental (.e., drones record yaw drone yaw gimbal camera separately). Thumbnail files given 8-character suffix looks random actually generated image contents. prevent clashes thumnbail files different flights 'gathered' single folder attached Table Contents folder (see uas_toc). use_magick = TRUE, use resizing functions magick package. slower equivalent functions imager package (default), may necessary processing TIFs ImageMagick installed computer (imager requires read TIFs).","code":""},{"path":[]},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_toc.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Table of Contents of flight summaries — uas_toc","title":"Generate a Table of Contents of flight summaries — uas_toc","text":"Generate Table Contents flight summaries","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_toc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Table of Contents of flight summaries — uas_toc","text":"","code":"uas_toc(   html_reports,   output_dir = \".\",   output_fn = \"index.html\",   gather_dir = NULL,   toc_title = \"UAS Flight Summaries\",   toc_desc = NULL,   fltmap_show = TRUE,   fltmap_kml = FALSE,   fltmap_base = NULL,   header_html = NULL,   footer_html = NULL,   overwrite_toc = FALSE,   overwrite_gather = FALSE,   open_toc = FALSE,   quiet = FALSE )"},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_toc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Table of Contents of flight summaries — uas_toc","text":"html_reports HTML file names flight summaries output_dir Output directory output_fn Output file name gather_dir Subdirectory output_dir HTML files copied toc_title Title show top Table Contents toc_desc short description appear title fltmap_show Show map flight areas, logical fltmap_kml Create KML flight areas, logical fltmap_base list object containing background KML files symbology flight map, see Details. header_html HTML file name URL use page header footer_html HTML file name URL use page footer overwrite_toc Overwrite existing file, logical overwrite_gather Subdirectory output_dir HTML files copied open_toc Open table contents browser done, logical quiet Suppress messages, logical","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_toc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a Table of Contents of flight summaries — uas_toc","text":"function generates master Table Contents HTML page set individual flight summaries created uas_report, saving TOC output_dir. TOC page can either point flight summary reports , copy single directory. htmls_reports vector HTML filenames including full path (.e., object returned uas_report). Reports appear Table Contents order. default behavior create links flight summary reports currently . function attempt create relative paths output_dir locations htmls_reports. minimum, requires output_dir htmls_reports volume. Preferably output_dir parent directory htmls_reports. HTML reports scattered across many directories, consider using gather_dir put one place. copy flight summary reports common location, pass value gather_dir. gather_dir sub-directory output_dir HTML files htmls_reports (associated files thumbnails) copied. gather_dir relative output_dir (absolute path). copy HTML files output_dir (.e., sub-directory), set gather_dir = '.' gather_dir already exist, R attempt create . fltmap_show = TRUE, Table Contents include interactive map showing flight areas flight summaries page. fltmap_base optional list lists can use additional layers appear map. Currently polygon polyline KML files supported additional base layers. list element named list three elements: kml_fn (KML file name), color (named color hex code outline), weight (outline thickness pixels). header_html footer_html allow specify filenames contain HTML text page header footer (.e., branding elements).","code":""},{"path":[]},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_worldfile.html","id":null,"dir":"Reference","previous_headings":"","what":"Create world and projection files for UAS images — uas_worldfile","title":"Create world and projection files for UAS images — uas_worldfile","text":"Create world files projection files UAS images","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_worldfile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create world and projection files for UAS images — uas_worldfile","text":"","code":"uas_worldfile(   x,   flt = NULL,   idx = NULL,   aux.xml = TRUE,   wld = FALSE,   wldext = \"auto\",   prj = FALSE,   rotated = TRUE,   quiet = FALSE )"},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_worldfile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create world and projection files for UAS images — uas_worldfile","text":"x list class 'uas_info' flt flight(s) x process (character numeric vector, default ) idx rows x process (default ) aux.xml Create aux.xml file, logical. See details. wld Create world file, logical. See details. wldext Extension world file, character. Ignored wld = FALSE. prj Create prj file, logical. See details. rotated Compute parameters replicate camera Yaw. quiet Show messages.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_worldfile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create world and projection files for UAS images — uas_worldfile","text":"list vectors filenames generated.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/reference/uas_worldfile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create world and projection files for UAS images — uas_worldfile","text":"function creates sidecard world files /projection files required view raw images GIS software ArcGIS QGIS. parameters function uses generate world file taken exclusively image metadata, including altitude launch point, focal length, . considered approximate best. accurate image placement, process images photogrammetry software. generate world files, must tell compute footprints generating flight metadata object. words, run uas_info, pass fp = TRUE. already generated metadata object flight, may also need pass update_cache = TRUE. Computing footprints requires altitude image, drones support (especially multispectral cameras). details see uas_info. function tested JPG files several DJI cameras. yet adapted TIF files multispectral cameras, may work formats (contact package author want try). aux.xml files  ESRI auxillary files raster layers.  objective open images ArcGIS QGIS, generating aux.xml files (default setting) need. read GIS software, name image file 'aux.xml' added . aux.xml files capable storing lot info raster layer, including statistics, rotation info, coordinate reference system, stuff. files generated function contain projection rotation info . Note also existing aux.xml files overwritten. aux.xml files sidecar file ArcGIS software seems support reading projection info. World files small text files extensions jpw tfw JPG TIF files respectively. read GIS software, must basename image saved directory. ArcGIS QGIS read world files, however needed info available aux.xml file. prj files contain just Coordinate Reference System info. seem recognized rasters ArcGIS, however QGIS picks .","code":""},{"path":[]},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"uasimg-190-2024-08-01","dir":"Changelog","previous_headings":"","what":"uasimg 1.9.0 (2024-08-01)","title":"uasimg 1.9.0 (2024-08-01)","text":"fairly significant update. Key feature improvements include ) rotated thumbnail images flight summary reports, ii) ability export individual images pseudo-rectified GeoTIFFs, iii) repairing ability download thumbnail images flights Google Maps StadiaMaps (via ggmap). uas_exp_geotiff(): new function create pseudo-georectified image (using modeled footprint) GeoTIFF (#7) uas_thumbnails_make(): new argument rotated create rotated thumbnails (FALSE default backward compatibility) uas_worldfile(): added new argument flt flight index (uas_info object can contain metadata multiple flights / image collections). Improved error messages. terra added suggested dependency (support new uas_exp_geotiff() function) magick moved imports suggests uas_convert(): checks added see magick installed leaflet.extras added imports (add full screen control leaflet map flight summary reports) lifecycle package added imports (communicate renamed arguments) uas_exp_kml(), uas_exp_shp(), uas_thumbnails_make(), uas_move(), uas_rename(), uas_report(): argument flt added consistency across functions; flt_idx deprecated. Improved error messages (#6) uas_report(): units argument added set whether use imperial metrics units flight area, altitude AGL, GSD (#11). Several arguments related downloading thumbnail images flight areas deprecated, renamed, added, consistency deal changes ggmap. uas_report.Rmd: modified thumbnail image height automatically set browser (accommodate thumbnail images different aspect ratios, including rotated images); added full screen control; added code support units argument uas_info(): cache auto-refreshed fp=TRUE cache=TRUE cache doesn’t contain footprints (#6); added extra sort datetimeoriginal deal odd case sorting images filenames doesn’t result sequential order (#9). cameras.csv: added DJI Zenmuse P1 (#8), Autel Evo2 RGB uas_cameras(): updated import view flight-yaw tag column","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"uasimg-183-2022-11-11","dir":"Changelog","previous_headings":"","what":"uasimg 1.8.3 (2022-11-11)","title":"uasimg 1.8.3 (2022-11-11)","text":"uas_worldfile(): updated function documentation (#6)","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"uasimg-182-2022-11-08","dir":"Changelog","previous_headings":"","what":"uasimg 1.8.2 (2022-11-08)","title":"uasimg 1.8.2 (2022-11-08)","text":"cameras.csv: updated EXIF fields Phantom 4 MS RGB (added tag_elev_agl) (#6) uas_info(): updated status message (include optional ext argument)","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"uasimg-181-2022-04-12","dir":"Changelog","previous_headings":"","what":"uasimg 1.8.1 (2022-04-12)","title":"uasimg 1.8.1 (2022-04-12)","text":"uas_rename(): new function rename images based name template placeholders image flight metadata uas_info(): updated documentation uas_metadata_make(): updated default flight metadata template uas_report.Rmd: changed default Window title short version flight name","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"uasimg-180-2022-03-20","dir":"Changelog","previous_headings":"","what":"uasimg 1.8.0 (2022-03-20)","title":"uasimg 1.8.0 (2022-03-20)","text":"uas_info(): argument ext added (filter file type); minor code cleaning, cameras.csv: Phantom 4 Pro RTK Phantom 4 Multispectral added","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"uasimg-179-2021-11-11","dir":"Changelog","previous_headings":"","what":"uasimg 1.7.9 (2021-11-11)","title":"uasimg 1.7.9 (2021-11-11)","text":"uas_info(): added argument path2name_fun; modified support new date_time column cameras.csv uas_path2name_fun(): new function returns function parse directory path concatenate user-specified elements form flight name; designed passed value path2name_fun argument uas_info() construct default flight names uas_report() uas_toc(): arguments header_html footer_html can now accept URLs magrittr package added imports (needed use results uas_path2name_fun()) cameras.csv added date_time column (accommodate cameras like Airphen don’t DateTimeOrginal EXIF tag) uas_readcameras() added date_time column import","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"uasimg-178-2021-10-25","dir":"Changelog","previous_headings":"","what":"uasimg 1.7.8 (2021-10-25)","title":"uasimg 1.7.8 (2021-10-25)","text":"uas_info(): fix bug occurred gpslatitude gpslongitude found EXIF data","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"uasimg-177-2021-09-15","dir":"Changelog","previous_headings":"","what":"uasimg 1.7.7 (2021-09-15)","title":"uasimg 1.7.7 (2021-09-15)","text":"added Airphen camera database uas_info(): modified generic camera used camera detected","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"uasimg-176-2021-07-31","dir":"Changelog","previous_headings":"","what":"uasimg 1.7.6 (2021-07-31)","title":"uasimg 1.7.6 (2021-07-31)","text":"added MicaSense Altum MicaSence RedEdge-MX camera database","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"uasimg-175-2021-07-28","dir":"Changelog","previous_headings":"","what":"uasimg 1.7.5 (2021-07-28)","title":"uasimg 1.7.5 (2021-07-28)","text":"added Phantom 4 Pro V2 (FC6310S) camera database","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"uasimg-174-2021-06-10","dir":"Changelog","previous_headings":"","what":"uasimg 1.7.4 (2021-06-10)","title":"uasimg 1.7.4 (2021-06-10)","text":"uas_toc(): fixed bug output_dir = “.”, gather_dir = NULL, input reports different volume","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"uasimg-173-2021-05-23","dir":"Changelog","previous_headings":"","what":"uasimg 1.7.3 (2021-05-23)","title":"uasimg 1.7.3 (2021-05-23)","text":"uas_report.Rmd: fixed bug group_img = FALSE","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"uasimg-172-2021-05-14","dir":"Changelog","previous_headings":"","what":"uasimg 1.7.2 (2021-05-14)","title":"uasimg 1.7.2 (2021-05-14)","text":"cameras.csv: added Mavic Air 2 (precision dimensions sensor available, hence footprints taken estimates ) uas_move(): renamed outdir_root outdir_base. updates Readme vignettes","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"uasimg-171-2021-05-10","dir":"Changelog","previous_headings":"","what":"uasimg 1.7.1 (2021-05-10)","title":"uasimg 1.7.1 (2021-05-10)","text":"uas_report(): fixed bug parsing results uas_thumbnails_make() uas_report.Rmd: added default value parameter nomap","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"uasimg-170-2021-05-09","dir":"Changelog","previous_headings":"","what":"uasimg 1.7.0 (2021-05-09)","title":"uasimg 1.7.0 (2021-05-09)","text":"NOTE: INSTALLING UPDATE RUN uas_clearcache() uas_toc(): added uas_report.css files get gathered stringr added imports (.e. required) cameras.csv uas_cameras(): added camera_abbrev columns uas_readcameras: added camera_abbrev uas_info(): updated find exiftool executable installed exiftoolr; camera_name camera_abbrev added attribute fields accommodate multi-sensor flights print.uas_info() report.Rmd: updated report number images per camera multi-sensor flights uas_report(): changed default filename suffix _rpt; updated multi-folder flights uas_move(): overhauled uas_worldfile(), uas_cropctr(): updated multi-folder flights uas_exp_shp(), uas_exp_kml(): updated multi-folder flights; argument img_dir replaced flt_idx uas_thumbnails_make(): argument img_dir replaced flt_idx hex logo added","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"uasimg-169-2021-05-05","dir":"Changelog","previous_headings":"","what":"uasimg 1.6.9 (2021-05-05)","title":"uasimg 1.6.9 (2021-05-05)","text":"uas_dirs_find(): fixed case images tb folders excluded","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"uasimg-168-2021-05-05","dir":"Changelog","previous_headings":"","what":"uasimg 1.6.8 (2021-05-05)","title":"uasimg 1.6.8 (2021-05-05)","text":"uas_dirs_find(): path column tibble now wrapped normalizePath() (primarily readability network paths) uas_report(): returned HTML file names now wrapped normalizePath(); show_gps_coord deprecated uas_toc(): fixed error libs subfolder gathered uas_toc.Rmd: added error trapping code metadata fields missing uas_report.Rmd: modified balloon text show GPS coords","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"uasimg-167-2021-05-04","dir":"Changelog","previous_headings":"","what":"uasimg 1.6.7 (2021-05-04)","title":"uasimg 1.6.7 (2021-05-04)","text":"uas_thumbnails_make(): modified automatically switch magick package functions (message) thumbnails TIFs created imager:::.magick() FALSE.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"uasimg-166-2021-05-03","dir":"Changelog","previous_headings":"","what":"uasimg 1.6.6 (2021-05-03)","title":"uasimg 1.6.6 (2021-05-03)","text":"uas_thumbnails_make(): enabled use_magick argument","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"uasimg-165-2021-05-02","dir":"Changelog","previous_headings":"","what":"uasimg 1.6.5 (2021-05-02)","title":"uasimg 1.6.5 (2021-05-02)","text":"uas_report(): added checks directory existence access uas_metadata_make(): argument md_template can now URL added Flight Metadata Vignette","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"uasimg-164-2021-05-01","dir":"Changelog","previous_headings":"","what":"uasimg 1.6.4 (2021-05-01)","title":"uasimg 1.6.4 (2021-05-01)","text":"uas_dirs_find(): new function find sub-directories images uas_thumbnails_make(): added stats argument display amount time taken per thumbnail uas_report(): added use_tmpdir argument render flight summary report temp folder (can prevent Pandoc errors images network drive)","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"uasimg-163-2021-04-30","dir":"Changelog","previous_headings":"","what":"uasimg 1.6.3 (2021-04-30)","title":"uasimg 1.6.3 (2021-04-30)","text":"uas_cropctr(): removed leftover debugging statement","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"uasimg-162-2021-04-28","dir":"Changelog","previous_headings":"","what":"uasimg 1.6.2 (2021-04-28)","title":"uasimg 1.6.2 (2021-04-28)","text":"uas_metadata_make(): added use_system_editor argument uas_report(): added header_html footer_html arguments","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"uasimg-161-2021-04-26","dir":"Changelog","previous_headings":"","what":"uasimg 1.6.1 (2021-04-26)","title":"uasimg 1.6.1 (2021-04-26)","text":"uas_metadata_make(): appended file: metadata files network paths get open notepad; added comments template","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"uasimg-160-2021-04-24","dir":"Changelog","previous_headings":"","what":"uasimg 1.6.0 (2021-04-24)","title":"uasimg 1.6.0 (2021-04-24)","text":"uas_convert(): new function converts images file formats (e.g., DNG JPG), preserving EXIF data magick exiftoolr added dependent packages (imports) uas_info(): added argument exiftoolr_use","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"uasimg-152-2020-12-02","dir":"Changelog","previous_headings":"","what":"uasimg 1.5.2 (2020-12-02)","title":"uasimg 1.5.2 (2020-12-02)","text":"uas_getoemflds(): added ‘uav’ list default flight metadata fields updated camera database: (added senseFly Aeria X DJI M100 X3Z) uas_report(), uas_exp_kml(), uas_exp_shp(): added checks dir.create()","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"uasimg-151-2020-11-14","dir":"Changelog","previous_headings":"","what":"uasimg 1.5.1 (2020-11-14)","title":"uasimg 1.5.1 (2020-11-14)","text":"uas_metadata_make(): additional comments inserted creating brand new new metadata file uas_getflds(): exported uas_thumbnails_make(): increased number bytes read create unique filename 500 2000 uas_info(): updated always rename yaw field even fp = FALSE uas_clearcache(): created","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"uasimg-150-2020-11-01","dir":"Changelog","previous_headings":"","what":"uasimg 1.5.0 (2020-11-01)","title":"uasimg 1.5.0 (2020-11-01)","text":"uas_report() uas_report.Rmd: arguments report_title kml_ctr added; trapped error metadata exists without image collection name; thumbnails disabled grouped images (better visualization implemented); additional  tags added facilitate web scraping uas_info(): deafult value fp changed FALSE; default value cache changed TRUE; flight id value saved return value (used primarily name files metadata$name_short missing) uas_flds_oem(): name_short notes added default fields; collection_name removed uas_toc() uas_toc.Rmd: check html files exist added; code migrated XML xml2 uas_exp() renamed (back ) uas_exp_shp(); uas_exp_kml() created uas_thumbnails_make() created xml2, tibble imager added Imports (required packages); XML magick package removed","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"uasimg-140-2020-10-01","dir":"Changelog","previous_headings":"","what":"uasimg 1.4.0 (2020-10-01)","title":"uasimg 1.4.0 (2020-10-01)","text":"uas_toc() uas_toc.Rmd updated - new summary_map argument displays interactive mission footprint map uas_report.Rmd updated - flight MCP converted base64 encoded meta tag uas_report.R updated - argument local_dir renamed show_local_dir; gps_coord renamed show_gps_coord uas_exp() renamed uas_exp_shp()","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"uasimg-138-2020-09-28","dir":"Changelog","previous_headings":"","what":"uasimg 1.3.8 (2020-09-28)","title":"uasimg 1.3.8 (2020-09-28)","text":"added kml_mcp uas_report()","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"uasimg-137-2020-09-27","dir":"Changelog","previous_headings":"","what":"uasimg 1.3.7 (2020-09-27)","title":"uasimg 1.3.7 (2020-09-27)","text":"improved help page uas_info() uas_cameras() added name_only argument uas_cameras() renamed argument csv exif_csv uas_info() added argument gps_coord uas_report() & modified uas_report.Rmd show GPS coordinates pop-windows","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"uasimg-136-2020-09-26","dir":"Changelog","previous_headings":"","what":"uasimg 1.3.6 (2020-09-26)","title":"uasimg 1.3.6 (2020-09-26)","text":"Added DJI ZenMuse X7 camera database uas_info() edited ) check number images directory computing forward overlap, ii) add bullet characters feedback messages","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"uasimg-135-2020-09-24","dir":"Changelog","previous_headings":"","what":"uasimg 1.3.5 (2020-09-24)","title":"uasimg 1.3.5 (2020-09-24)","text":"Added NEWS.md file track changes package. geo2utm() modified return EPSG number (comply recent changes rgdal proj4). installing update, users advised delete old cache (see uas_getcache()) prevent warning messages unknown datums proj4string. uas_cropctr() added - crops around center image better photo mosaic","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"changes-in-version-134-2020-08-25","dir":"Changelog","previous_headings":"","what":"Changes in version 1.3.4 (2020-08-25)","title":"Changes in version 1.3.4 (2020-08-25)","text":"uas_report() modified return file name HTML files already exist overwrite = FALSE; corrected extension tif thumbnail files. Added uas_metadata_make(). Modified uas_toc() uas_toc.Rmd support gather = '.', handle duplicate HTML names, description, default footer. Corrected bug uas_info() external metadata found passed argument. minor fixes enhancements.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"changes-in-version-133-2020-08-20","dir":"Changelog","previous_headings":"","what":"Changes in version 1.3.3 (2020-08-20)","title":"Changes in version 1.3.3 (2020-08-20)","text":"Added option uas_report() create thumbnails previews appear popup windows image collection catalog. Added combine_dirs argument uas_grp_flt() support multi-directory flight parsing. Added custom print functions uas_info uas_grp objects. Numerous small enhacements bug fixes.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"changes-in-version-132-2020-08-08","dir":"Changelog","previous_headings":"","what":"Changes in version 1.3.2 (2020-08-08)","title":"Changes in version 1.3.2 (2020-08-08)","text":"uas_info(() modified support file names metadata.txt expanded metadata*.txt.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"changes-in-version-131-2020-08-07","dir":"Changelog","previous_headings":"","what":"Changes in version 1.3.1 (2020-08-07)","title":"Changes in version 1.3.1 (2020-08-07)","text":"Renamed uas_getcache() uas_setcache(). Added uas_grp_flt() uas_grps2col(). Added uas_getflds() uas_setflds(). Added Mavic 2 Pro camera database. renamed meta_extra argument metadata uas_info().","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"changes-in-version-13-2020-07-04","dir":"Changelog","previous_headings":"","what":"Changes in version 1.3 (2020-07-04)","title":"Changes in version 1.3 (2020-07-04)","text":"Added uas_getcachedir() uas_setcachedir() manage cache directory EXIF data. Renamed cache arguments uas_info() cache update_cache. Added uas_toc().","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"changes-in-version-127-2020-06-30","dir":"Changelog","previous_headings":"","what":"Changes in version 1.2.7 (2020-06-30)","title":"Changes in version 1.2.7 (2020-06-30)","text":"Modified uas_report() uas_report.Rmd, metadata now encoded HTML. Argument toc_csv deprecated. summary.uas_info() replaced print.uas_info() (generic print method).","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"changes-in-version-126-2020-06-20","dir":"Changelog","previous_headings":"","what":"Changes in version 1.2.6 (2020-06-20)","title":"Changes in version 1.2.6 (2020-06-20)","text":"Added ‘description’ element meta_extra argument uas_info(). Added cache_dir cache_update uas_info(). Split overwrite argument uas_report() overwrite_html overwrite_png.","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"changes-in-version-125-2020-06-14","dir":"Changelog","previous_headings":"","what":"Changes in version 1.2.5 (2020-06-14)","title":"Changes in version 1.2.5 (2020-06-14)","text":"Added meta_extra argument uas_info(). Added toc_csv argument uas_report().","code":""},{"path":"https://ucanr-igis.github.io/uasimg/news/index.html","id":"changes-in-version-124-2020-04-03","dir":"Changelog","previous_headings":"","what":"Changes in version 1.2.4 (2020-04-03)","title":"Changes in version 1.2.4 (2020-04-03)","text":"Initial release uasimg prefixes changed uavimg_ uas_ Converted functions sf package Added overwrite argument uas_exp() uas_report() Added support paths spaces: uas_info() Added sf, tidyr crayon packages dependencies Fixed bug findonpath() path values trailing slashes","code":""}]
